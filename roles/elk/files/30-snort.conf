input {
        udp {
                port => 9010
                type => snort
        }
}

filter {
        if [type] == "snort" {
                  grok {
                                match => { "message" => "%{IDMEF_MESSAGE}" }
                  }

                  mutate
                  {
                  			remove_field => ["syslog5424_pri"]
                  			remove_field => ["syslog5424_ver"]

                  			add_field => [ "Alert.CreateTime", "%{syslog5424_ts}" ]
                  			remove_field => ["syslog5424_ts"]
                  			add_field => [ "Alert.Sourse.Process.Pid", "%{syslog5424_proc}" ]
                  			remove_field => ["syslog5424_proc"]
                  			add_field => [ "Alert.Sourse.Process.Name", "%{syslog5424_app}" ]
                  			remove_field => ["syslog5424_app"]
                  			add_field => [ "Alert.Analyzer.Name", "%{syslog5424_host}" ]
                  			add_field => [ "Alert.Source.Node.Name", "%{syslog5424_host}" ]
                  			remove_field => ["syslog5424_host"]

                  }

                  if [Alert.Analyzer.Level] == "1" {
                          mutate { add_field => [ "Alert.Analyzer.Level.Normalized", "15" ] }
                  } else if [Alert.Analyzer.Level] == "2" {
                          mutate { add_field => [ "Alert.Analyzer.Level.Normalized", "11" ] }
                  } else if [Alert.Analyzer.Level] == "3" {
                          mutate { add_field => [ "Alert.Analyzer.Level.Normalized", "6" ] }
                  } else if [Alert.Analyzer.Level] == "4" {
                          mutate { add_field => [ "Alert.Analyzer.Level.Normalized", "4" ] }
                  }

                  mutate {

                           #Next line is hack to fix issue #1. It connected with that Kibana in term graph ises .raw fields, but logstash creates it only for strings fields
                           add_field => [ "Alert.Analyzer.Level.Normalized.raw", "%{Alert.Analyzer.Level.Normalized}" ]
                           convert => [ "Alert.Analyzer.Level", "integer" ]
                           convert => [ "Alert.Analyzer.Level.Normalized", "integer" ]
                  }

                  geoip {
                           source => "Alert.Source.Node.Address"
                           target => "Alert.Source.Node.Geoip"
                  }
        }
}

